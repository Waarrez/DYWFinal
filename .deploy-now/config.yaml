version: 1.0
deploy:
  # comment in one of the following lines to force the use of the recurring or bootstrap configuration
#  force: recurring
#  force: bootstrap

  # configure the initial deployment of each branch
  bootstrap:
    # directories that are not overwritten or removed by the next deployment
    excludes:
      - tests
      - node_modules
      # the following three files are generated during composer action and are not neccessary
      - DOCKER_ENV
      - docker_tag
      - output.log
      
    # commands that are executed on the runtime after new files are copied
    post-deployment-remote-commands:
      - php bin/create-app-secret
      # set right file permissions for Symfony
      - find $(pwd) -type f -not -path "$(pwd)/logs/*" -exec chmod 664 {} \;
      - find $(pwd) -type d -not -name "logs" -exec chmod 775 {} \;
      - mkdir -p var && chmod -R o+w var
      # clear caches, migrate database, install assets, warmup caches
      - APP_ENV=prod APP_DEBUG=0 php bin/console cache:clear
      #- php bin/console doctrine:database:create
      #- php bin/console doctrine:migrations:migrate --no-interaction --allow-no-migration
      - php bin/console assets:install
      - APP_ENV=prod APP_DEBUG=0 php bin/console cache:warmup

  # configure all following deployments of each branch
  recurring:
    # directories that are not overwritten or removed by the next deployment
    excludes:
      - tests
      - node_modules
      - DOCKER_ENV
      - docker_tag
      - output.log
      # the var folder shouldn't be synced after first deployment, because there
      # are files inside from running the Symfony app (e.g. database)
      - var
      
    # commands that are executed on the runtime before new files are copied
    pre-deployment-remote-commands:
      - echo "here you could enter maintenance mode..."
    
    # commands that are executed on the runtime after new files are copied
    post-deployment-remote-commands:
      - php bin/create-app-secret
      # set right file permissions for Symfony
      - find $(pwd) -type f -not -path "$(pwd)/logs/*" -exec chmod 664 {} \;
      - find $(pwd) -type d -not -name "logs" -exec chmod 775 {} \;
      - chmod -R o+w var
      # clear caches, migrate database, install assets, warmup caches
      - APP_ENV=prod APP_DEBUG=0 php bin/console cache:clear
      #- php bin/console doctrine:migrations:migrate --no-interaction --allow-no-migration
      - php bin/console assets:install
      - APP_ENV=prod APP_DEBUG=0 php bin/console cache:warmup
